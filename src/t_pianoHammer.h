// Piano-Hammmer// by Thomas Resch// ported to c from Stefan Belbaos's Prepared Piano																									/*																									       *//*-------------------------------------------struct t_pianoHammer------------------------------------------*//*	hammer = [1 5000 -0.01];% each row of this array holds: mass density ratio (hammer/string), fundamental freq. of hammer,% hammer initial position, relative to string.																								*/#include "t_std.h"typedef struct _t_pianoHammer{ double nextHammer; double hammer; double lastHammer; //double *hammerForce;    double hammerForce[MAXNUMBEROFSTRINGS]; double hammerMassDensityRatio;  // Hammer/String... double hammerFrequency; // fundamentalFreqHammer //double *hammerPosition;    double hammerPosition[MAXNUMBEROFSTRINGS]; double hammerInitPosition; double hammerVelocity;    // Hammer-strike-velocity double dt; double dt_2; double dx; double *output; double normHammerIndex; int hammerContact; int hammerIndex; int hammerOn; int NS; } t_pianoHammer;t_pianoHammer *t_pianoHammer_new(double hammerInitPosition_, double hammerFrequency_, double hammerMassDensityRatio_, double hammerVelocity_, int NS_);void t_pianoHammer_free(t_pianoHammer *x);void t_pianoHammer_perform(t_pianoHammer *x, double ***nextString, double ***string);void t_pianoHammer_calculateHammerIndex(t_pianoHammer *x);void t_pianoHammer_set_dxdt(t_pianoHammer *x, double dx_, double dt_);void t_pianoHammer_reset(t_pianoHammer *x);